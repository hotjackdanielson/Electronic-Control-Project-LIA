#include <LiquidCrystal.h>

// Comment section:

// This Arduino code implements a PI (Proportional-Integral) control system that uses a setpoint, a process variable (PV), and a control output (CO) to regulate an actuator (e.g., a motor or a heater).
// The code also utilizes an LCD display and buttons to interact with the control system and display relevant information.

int sensor = A0; // Pin for the sensor (e.g., LDR)
int incButton = 2;
int decButton = 3;
int actuator = 6; // Pin for the actuator (e.g., LED)
int PV = 0; // Process variable (LDR value)
int setPoint = 0; // Setpoint (potentiometer value)
int CO = 0; // Control output value
int Error = 0; // Variable to store the error (SP - PV)
int button1 = 4;
int button2 = 5;
int displayIndex = 0;
float pGain = 0.1; // Proportional Gain variable
float iGain = 0.1; // Integral Gain Variable
int integralAction; // Integral action value (accumulation of the error)
unsigned long previousMillis = 0; // Variable to store the previous millis value for timing
const long interval = 100; // Interval in which the control loop will be executed
unsigned long currentMillis; // Variable to store the current millis value

LiquidCrystal lcd(12, 11, 10, 9, 8, 7); // Initialize the LCD display with the corresponding pins

void setup() {
pinMode(actuator, OUTPUT);
pinMode(incButton, INPUT_PULLUP);
pinMode(decButton, INPUT_PULLUP);
pinMode(button1, INPUT_PULLUP);
pinMode(button2, INPUT_PULLUP);
Serial.begin(9600);
lcd.begin(16, 2);
}

void loop() {
PV = analogRead(sensor); // Read the value from the sensor (0-1024)
currentMillis = millis(); // Read the current millis value

if (currentMillis - previousMillis >= interval) {
previousMillis = currentMillis;
Error = setPoint - PV; // Calculate the error (SP - PV)
integralAction = (integralAction + Error); // Accumulate the error for integral control
CO = (pGain * Error) + (iGain * integralAction); // Calculate the control output (P control + I control)

if (CO > 255) {
  CO = 255; // Cap the control output at the maximum value of 255
}

if (CO < 0) {
  CO = 0; // Cap the control output at the minimum value of 0
}
analogWrite(actuator, CO); // Apply the control output to the actuator

if (digitalRead(incButton) == LOW) {
  if (displayIndex == 0) setPoint += 10; // Increase the setpoint by 10 if in setpoint display mode
  else if (displayIndex == 1) CO = 255; // Set the control output to the maximum value if in control output display mode
  else if (displayIndex == 2) PV += 10; // Increase the process variable by 10 if in PV display mode
  else if (displayIndex == 3) Error += 10; // Increase the error by 10 if in error display mode
  else if (displayIndex == 4) pGain += 0.1; // Increase the P Gain by 0.1 if in P Gain display mode
    else if (displayIndex == 5) iGain += 0.1; // Increase the iGain by 0.1 if in P Gain display mode
    delay(200);
  } else if (digitalRead(decButton) == LOW) {
    if (displayIndex == 0) setPoint -= 10; // Decrease the setpoint by 10 if in setpoint display mode
    else if (displayIndex == 1) CO = 0; // Turn off the actuator if in control output display mode
    else if (displayIndex == 2) PV -= 10; // Decrease the process variable by 10 if in PV display mode
    else if (displayIndex == 3) Error -= 10; // Decrease the error by 10 if in error display mode
    else if (displayIndex == 4) pGain -= 0.1; // Decrease the hysteresis value by 10 if in hysteresis display mode
     else if (displayIndex == 5) iGain -= 0.1; // decrease the iGain by 0.1 if in P Gain display mode
    delay(200);
  }
  
  if (digitalRead(button1) == LOW) {
    displayIndex++;
    if (displayIndex > 5) displayIndex = 0;
    delay(200);
  }
  
  if (digitalRead(button2) == LOW) {
    displayIndex--;
    if (displayIndex < 0) displayIndex = 5;
    delay(200);
  }
  
  switch (displayIndex) {
    case 0:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("SP= ");
      lcd.print(setPoint);
      break;
    case 1:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("CO= ");
      lcd.print(CO);
      break;
    case 2:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("PV= ");
      lcd.print(PV);
      break;
    case 3:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Error= ");
      lcd.print(Error);
      break;
    case 4:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("PGain= ");
      lcd.print(pGain);
      break;
      case 5:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("IGain= ");
      lcd.print(iGain);
      break;
  }

    Serial.print("SP = "); 
Serial.print(setPoint);
Serial.print("\t CO = ");
Serial.print(CO);
Serial.print("\t PV = ");
Serial.print(PV);
Serial.print("\t P Gain = ");
Serial.print(pGain);
Serial.print("\t I Gain = ");
Serial.print(iGain);
Serial.println();
  }

}
